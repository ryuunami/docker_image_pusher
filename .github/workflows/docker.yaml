name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            echo "image $image"
            # 获取镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            echo "image_name_tag $image_name_tag"
            # 获取命名空间 例如kasmweb,  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            echo "name_space: $name_space"
            # 这里不要是空值影响判断
            name_space="${name_space}_"
            # 获取镜像名例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            echo "image_name: $image_name"
            
            # 如果镜像存在于数组中，则添加temp_map
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 # 如果temp_map已经存在镜像名，判断是不是同一命名空间
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "duplicate image name: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                # 存镜像的命名空间
                temp_map[$image_name]=$name_space
            fi       
        done < images.txt
        
        
        while IFS= read -r line; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            echo "Processing line: $line"
            
            # 解析平台信息
            platforms=""
            if echo "$line" | grep -q '\--platform'; then
                platforms=$(echo "$line" | sed -n 's/.*--platform[= ]\([^ ]*\).*/\1/p')
            fi
            
            # 如果没有指定平台，默认使用 linux/amd64
            if [[ -z "$platforms" ]]; then
                platforms="linux/amd64"
                echo "No platform specified, using default: $platforms"
            else
                echo "Found platforms: $platforms"
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            
            # 获取 镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 获取镜像名例  例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
        
            name_space_prefix=""
            # 如果镜像名重名
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               #如果命名空间非空，将命名空间加到前缀
               if [[ -n "${name_space}" ]]; then
                  name_space_prefix="${name_space}_"
               fi
            fi
            
            # 目标镜像名（不包含架构前缀）
            target_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$name_space_prefix$image_name_tag"
            echo "Target image: $target_image"
            
            # 分割平台列表
            IFS=',' read -ra platform_array <<< "$platforms"
            
            # 如果只有一个平台，直接推送
            if [[ ${#platform_array[@]} -eq 1 ]]; then
                platform=${platform_array[0]}
                echo "Single platform deployment: $platform"
                
                # 拉取指定平台的镜像
                echo "docker pull --platform=$platform $image"
                docker pull --platform=$platform $image
                
                # 标记镜像
                echo "docker tag $image $target_image"
                docker tag $image $target_image
                
                # 推送镜像
                echo "docker push $target_image"
                docker push $target_image
                
            else
                # 多平台部署
                echo "Multi-platform deployment: ${platform_array[*]}"
                
                # 存储每个平台的镜像标签
                platform_tags=()
                
                # 为每个平台拉取、标记并推送镜像
                for platform in "${platform_array[@]}"; do
                    # 解析架构信息
                    arch=$(echo "$platform" | cut -d'/' -f2)
                    variant=""
                    if [[ "$platform" == *"/"*"/"* ]]; then
                        variant=$(echo "$platform" | cut -d'/' -f3)
                    fi
                    
                    # 构建符合Harbor多架构存储的标签
                    # 使用 sha256 digest 作为引用，确保Harbor能正确关联
                    platform_tag="$target_image@sha256:$(date +%s%N | sha256sum | head -c 64)"
                    platform_tags+=("$platform_tag")
                    
                    echo "Processing platform: $platform"
                    
                    # 拉取指定平台的镜像
                    echo "docker pull --platform=$platform $image"
                    docker pull --platform=$platform $image
                    
                    # 标记镜像（使用特殊标签格式）
                    echo "docker tag $image $platform_tag"
                    docker tag $image $platform_tag
                    
                    # 推送镜像
                    echo "docker push $platform_tag"
                    docker push $platform_tag
                done
                
                # 创建 manifest 清单
                echo "Creating manifest for multi-platform image: $target_image"
                
                # 删除可能存在的旧 manifest
                docker manifest rm $target_image 2>/dev/null || true
                
                # 创建新的 manifest
                manifest_cmd="docker manifest create --amend $target_image"
                for tag in "${platform_tags[@]}"; do
                    manifest_cmd="$manifest_cmd $tag"
                done
                echo "Executing: $manifest_cmd"
                $manifest_cmd
                
                # 为每个平台设置正确的架构信息
                for i in "${!platform_array[@]}"; do
                    platform="${platform_array[$i]}"
                    platform_tag="${platform_tags[$i]}"
                    
                    # 解析架构信息
                    arch=$(echo "$platform" | cut -d'/' -f2)
                    variant=""
                    if [[ "$platform" == *"/"*"/"* ]]; then
                        variant=$(echo "$platform" | cut -d'/' -f3)
                    fi
                    
                    # 设置架构信息
                    if [[ -n "$variant" ]]; then
                        echo "docker manifest annotate $target_image $platform_tag --os linux --arch $arch --variant $variant"
                        docker manifest annotate $target_image $platform_tag --os linux --arch $arch --variant $variant
                    else
                        echo "docker manifest annotate $target_image $platform_tag --os linux --arch $arch"
                        docker manifest annotate $target_image $platform_tag --os linux --arch $arch
                    fi
                done
                
                # 推送 manifest 清单
                echo "docker manifest push --purge $target_image"
                docker manifest push --purge $target_image
                
                echo "Multi-architecture image created and pushed successfully"
            fi
            
            echo "Completed processing: $image"
            echo "----------------------------------------"
            
        done < images.txt
